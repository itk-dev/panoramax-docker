# Adapted from https://gitlab.com/panoramax/server/api/-/blob/develop/docker/docker-compose-full.yml
#
# Complete docker compose with geovisio backend, a database, a blurring API and a keycloak for authentication
# they use the local network in order for the oauth dance to work (keycloak should be accessible by the `backend` service and the user's browser)
# * the keycloak is accessible through http://localhost:8182
# * the backend is accessible through http://localhost:5001
# * the blurring API is accessible through http://localhost:5500
# * the website is accessible through http://localhost:3000
# (the database is not on the local network since only the backend need to access it)
# if the port are already bound on your system, change them in this file.
# An admin user is provided with the name `admin` and the password `password`.


x-base-api: &api-default
  image: panoramax/api:${GEOVISIO_IMAGE_TAG:-latest}
  platform: linux/amd64
  build:
    context: ..
    dockerfile: Dockerfile
    cache_from:
      - registry.gitlab.com/panoramax/server/api:build_cache


services:
  auth:
    image: quay.io/keycloak/keycloak:20.0.1
    ports:
      - "8182:8182"
    volumes:
      - ./keycloak-realm.json:/opt/keycloak/data/import/geovisio_realm.json
    command: start-dev --import-realm
    environment:
      GEOVISIO_BASE_URL: http://localhost:5001
      GEOVISIO_CLIENT_SECRET: what_a_secret
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      KEYCLOAK_FRONTEND_URL: http://localhost:5001/api/auth/login
      KC_HTTP_PORT: 8182
      PROXY_ADDRESS_FORWARDING: true
    healthcheck:
      test: curl --fail http://localhost:8182/realms/geovisio
      timeout: 5s
      interval: 5s
      retries: 5
      start_period: 60s

  migrations:
    <<: *api-default
    command: db-upgrade
    environment:
      DB_URL: postgres://gvs:gvspwd@db/geovisio
    depends_on:
      db:
        condition: service_healthy

  role-initializer:
    # To have a usable instance, we set the already created `admin` account as admin.
    <<: *api-default
    entrypoint:
      - /bin/bash
      - -c
      - |
        python3 -m flask user admin --set-role admin --create
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      DB_URL: postgres://gvs:gvspwd@db/geovisio

  api:
    <<: *api-default
    command: api
    depends_on:
      auth:
        condition: service_healthy
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      OAUTH_CLIENT_ID: geovisio
      OAUTH_CLIENT_SECRET: what_a_secret
      DB_URL: postgres://gvs:gvspwd@db/geovisio
      OAUTH_OIDC_URL: http://localhost:8182/realms/geovisio
      OAUTH_PROVIDER: oidc
      FLASK_SECRET_KEY: a_very_secret_key_never_to_be_used_in_production
      API_FORCE_AUTH_ON_UPLOAD: True
      PICTURE_PROCESS_THREADS_LIMIT: 0
      PICTURE_PROCESS_DERIVATES_STRATEGY: PREPROCESS
      FS_URL: /data/geovisio
      NB_API_THREADS: 10
      API_LOG_LEVEL: debug
    ports:
      # Mac Control Center is listening to port 5000 and port 7000 by default.
      - "5001:5000"
    volumes:
      - pic_data:/data/geovisio
    extra_hosts:
      - "localhost:host-gateway"

  website:
    image: panoramax/website:latest
    platform: linux/amd64
    environment:
      VITE_INSTANCE_NAME: GeoVisio Docker
      VITE_API_URL: http://localhost:5001/
    ports:
      - "3000:3000"

  # @TODO (itk-dev) - setup/enable blurring
  # Background workers used to process pictures in the background
  # calling the blur API and generating derivates (SD picture and tiles for faster rendering in photosphereviewer)
  # Several background workers can run together
  # Note: the blurring is done only if API_BLUR_URL is configured, and it's not the case in this docker compose
  # To have blurring, the docker-compose-blurring.yml file needs to be added (cf documentation in this docker compose file)
  background-worker:
    <<: *api-default
    command: picture-worker
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    environment:
      DB_URL: postgres://gvs:gvspwd@db/geovisio
      PICTURE_PROCESS_DERIVATES_STRATEGY: PREPROCESS
      FS_URL: /data/geovisio
    deploy:
      mode: replicated
      replicas: 1 # by default this number of workers will be run. This can be changed at runtime with `docker compose up background-worker -d --scale background-worker=<VALUE>`
    volumes:
      - pic_data:/data/geovisio
    extra_hosts:
      - "localhost:host-gateway"

  db:
    image: postgis/postgis:16-3.4
    platform: linux/amd64
    ports:
      - "5445:5432"
    healthcheck:
      test: pg_isready -h db -q -d $$POSTGRES_DB -U $$POSTGRES_USER
      timeout: 5s
      interval: 5s
      retries: 5
      start_period: 60s
    environment:
      POSTGRES_DB: geovisio
      POSTGRES_PASSWORD: gvspwd
      POSTGRES_USER: gvs
    volumes:
      - postgres_data:/var/lib/postgresql/data/

volumes:
  postgres_data:
    name: geovisio_postgres_data
  pic_data: {}
